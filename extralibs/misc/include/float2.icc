#ifndef _FLOAT2_ICC
#define _FLOAT2_ICC

// Inline functions for float2

// Inline definitions for float2

inline float float2::operator()(const int i) const
{
    float x;
#ifdef DEBUGFLG
    assert(i > 0 && i < 3);
#endif
    switch(i) {
    case 1:
      x = XX;
      break;
    default:
      x = YY;
      break;

    }

    return x;
}


inline float& float2::operator()(const int i)
{
    float *x;
#ifdef DEBUGFLG
    assert(i > 0 && i < 3);
#endif

    switch(i) {
    case 1:
      x = &XX;
      break;
   default:
      x = &YY;
      break;

    }

//    if (i==1) x = &XX;
//    else if (i==2) x = &YY;
//    else x = &ZZ;

    return *x;
}


inline float float2::norm2() const
{
    return sqrt(XX * XX + YY * YY );
}

// -V
inline const float2 operator-(const float2& v)
{
    return float2(-v.XX, -v.YY);
}


inline const float2 operator+(const float2& a, const float2& b){
    return float2(a.XX+b.XX,a.YY+b.YY);
}

inline const float2 operator-(const float2& a, const float2& b){
    return float2(a.XX-b.XX,a.YY-b.YY);
}

inline bool operator==(const float2& a, const float2& b) {
    return (a.XX == b.XX) && (a.YY == b.YY) ;
}

//! M != M (no fuzz for comparison)
inline bool operator!=(const float2& a, const float2& b) {
    return !(a==b);
}

inline float2& float2::operator=(const float2& m) {
    XX = m.XX;
    YY = m.YY;

    return (*this);
}

//! Conversion to string.
Bstring ToStr(const float2& val);

inline float2& float2::operator+=(const float2& m) {
    XX += m.XX;
    YY += m.YY;

    return (*this);
}

inline float2& float2::operator-=(const float2& m) {
    XX += m.XX;
    YY += m.YY;

    return (*this);
}

inline float2::float2(const float a1, const float a2):
    XX(a1),YY(a2){}

inline bool float2::isZero() const
{
    return (XX==0.0)&&(YY==0.0);
}

inline bool float2::isNonZero() const
{
    return (XX!=0.0)||(YY!=0.0);
}

#endif
